
import numpy as np
import math

flipper = 1



a = 40
b = 40
z_increment = 5
base_increment = 5
base_height = 80
layers = 26
gran = 90
base_gran = 5
x_increment = [0.0]*100
y_increment = [0.0]*100

x_increment[0:11] = [1]*12
x_increment[12] = 0
x_increment[13:24] = [-1]*12
y_increment[0:11] = [-1]*12
y_increment[12] = 0
y_increment[13:24] = [1]*12

#20-25 makes the x wider and y narrower on the bottom half and the x narrower and y wider on the top half

x = -a
xbase = []
ybase = []

while x <= a:
    y = math.sqrt(b*b * (1 - (x * x)/(a * a)))
    y = round(y,3)
    if flipper == 1:
        xbase.append(x)
        ybase.append(y)
        xbase.append(x)
        ybase.append(-y)
    elif flipper == -1:
        xbase.append(x)
        ybase.append(-y)
        xbase.append(x)
        ybase.append(y)
        
    if (x+base_increment > a):
        break 
    
    X = x
    count = 0

    while (count < base_gran):
        
        X = X + (base_increment/base_gran)
        
        
        y = math.sqrt(b*b * (1 - (X * X)/(a * a)))
        y = round(y,3)
        X = round(X,3)
        if flipper == 1:
            xbase.append(X)
            ybase.append(-y)
        elif flipper == -1:
            xbase.append(X)
            ybase.append(y)
        
        count = count + 1

    x = x + (base_increment)

    
    flipper = -flipper


if len(xbase) != len(ybase):
    raise ValueError('xbase and ybase are not the same!')


n = 0
for n in range(len(xbase)):
    print('G1','X'+str(xbase[0+n]), 'Y'+str(ybase[0+n]), 'Z'+str(base_height))
    n = n +1


xlayer = []
ylayer = []
zlayer = []

def draw_circle(a,b,layers,gran):
    numerical_height = base_height + z_increment
    new_layer_var = 0
    while layers >= 1:
    
        if new_layer_var >= 1:
            xlayer.append(xlayer[-1])
            ylayer.append(ylayer[-1])
            numerical_height = numerical_height + z_increment
            zlayer.append(numerical_height)
            a = a + x_increment[new_layer_var - 1]
            b = b + y_increment[new_layer_var - 1]
            
        def circle(radian,a,b):
            return round(a*math.cos(radian),3), round(b*math.sin(radian),3)
            
        for radian in np.linspace(0, 2*math.pi, gran):
            (xval,yval) = (circle(radian,a,b))
            xlayer.append(xval)
            ylayer.append(yval)
            zlayer.append(numerical_height)
            
        layers = layers - 1
        new_layer_var = new_layer_var + 1

draw_circle(a,b,layers,gran)

if len(xlayer) != len(ylayer):
    raise ValueError('xlayer and ylayer are not the same!')

n = 0
for n in range(len(xlayer)):
    print('G1','X'+str(xlayer[0+n]), 'Y'+str(ylayer[0+n]), 'Z'+str(zlayer[0+n]))
    n = n +1
